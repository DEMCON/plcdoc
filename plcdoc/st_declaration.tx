// Process complete declaration
Declaration:
    typedefs*=TypeDef
    (function=Function)?
//    (program=Program)?
;

TypeDef:
    attributes*=Attribute
    comment=CommentBlock?
    'TYPE' name=ID ('EXTENDS' extends=ID)? ':'
    (type=TypeStruct | type=TypeEnum)
    'END_TYPE'
    CommentIgnored*
;

TypeStruct:
    'STRUCT'
    properties*=Variable
    'END_STRUCT'
;

TypeEnum:
    '('
    values*=EnumOption[',']
    ')' base_type=ID? ';'
;

EnumOption:
    name=ID
    (':=' number=INT)?
;

Function:
    comment=CommentBlock?
    function_type=FunctionType name=ID ('EXTENDS' extends=ID)? (':' return=ID)?
    lists*=VariableList
    CommentIgnored*
;

FunctionType :
    'FUNCTION_BLOCK' | 'FUNCTION' | 'METHOD' | 'PROGRAM'
;

Program:
    comment=CommentBlock?
    'PROGRAM' name=ID
    lists*=VariableList
;

Attribute :
    comment=CommentBlock?
    '{' 'attribute' '\'' attribute=ID '\'' '}' /\s*/
    // The extra match of whitespace is need to prevent issues with a following comment
;

Listing :
    VariableList | CommentIgnored
;

VariableList:
    CommentIgnored*
    name=VariableListType
    variables*=Variable
    'END_VAR'
    CommentIgnored*
;

VariableListType:
    /VAR_.*/ | 'VAR'
;

// A single variable definition
Variable:
    CommentIgnored*
    name=ID ':' type=ID value=Value? ';' comment=CommentDescription?
    CommentIgnored*
;

// Variable initial value
Value:
    ':=' value=Literal
;

// Catch literals for initialization
Literal:
    STRICTFLOAT|INT|STRING|ID
;

// The `Comment` clause is reserved, create a custom clause that won't be processed
CommentIgnored: /\/\/.*$/;

CommentDescription:
    '//' comment=/.*$/
;

CommentBlock[noskipws]:
    comment=/\(\*(.|\n)*?\*\)/
    // Use the non-greedy repetition `*?`
;
